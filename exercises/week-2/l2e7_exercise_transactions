Transactions
============

Our personal library app is looking good.  We could already use it to
store a catalogue of books (albeit only in memory, for now); in this
exercise we shall take it upwards on the usefulness scale by
implementing loan-tracking functionality.  Let us never again wonder
whether that book which seems nowhere to be found might have been
borrowed by someone!


Exercise goals
--------------

Upon completion of this exercise, you should be able to use the
library app to store information on books lent to friends (and
possibly also on those you yourself have borrowed, if you care to add
that functionality).  The code should be robust enough easily to scale
to what an actual library might use, with the potential to record
multiple lend/return transactions in parallel.


Implementation
--------------

There are two basic approaches one could take to the task at hand:

 1. keep all book data in a single reference (meaning an object of
   some appropriate reference type);

 2. split the collection of books in two parts: one for the books
   currently available in-house and one for those which have been lent
   to someone and not yet returned.

With the second design we would have to use Refs, while with the first
design both Refs and Atoms could conceivably be used.  (Do you see why
that is?)  Pick one approach, define your Atom / Ref(s), then define
the functions to be called as follows:

    (add-loan person item)

    (accept-return person item)

`add-loan` should accept optional keyword arguments:

    (add-loan person item :return-by some-date)

Feel free to handle other types of information you might find useful.
(An actual library would likely want to count 'renewals' etc.)  The
suggested approach to storing loan information for this exercise is to

    (assoc item :loan-data {:person "..." ...})

The `item` argument to `add-loan` and `accept-return` should be a map
containing enough information to identify the object being loaned (a
primary key); for our purposes the title together with the list of
authors (`{:title "..." :authors [...]}`) will be acceptable.

Would data integrity be preserved if your functions were being called
simultaneously by multiple threads?  (For instance, is there any
possibility of a book being added to the 'on loan' collection while
not being removed from the 'in house' collection?)
